@page "/counter"
@using CRUDNet8.Client.Auth
@using System.Security.Claims

@* @rendermode InteractiveAuto *@
@* @rendermode @(new InteractiveAutoRenderMode(prerender: false)) *@
@* @rendermode InteractiveWebAssembly *@
@rendermode @(new InteractiveWebAssemblyRenderMode(prerender: false))


@inject ILogger<Counter> logger
@* 
(Cannot provide a value for property 'authStateProvider' on type 'CRUDNet8.Client.Pages.Counter'. There is no registered service of type 'CRUDNet8.Client.Auth.CustomAuthStateProvider'.)
@inject CustomAuthStateProvider authStateProvider; 
*@

@*
@attribute [Authorize]
@using Microsoft.AspNetCore.Authorization
*@

<PageTitle>Counter</PageTitle>

<h1>Counter</h1>

<h1 class="text-muted">Render @(OperatingSystem.IsBrowser() ? "Wasm" : "Server")</h1>
<p role="status">Current count: @currentCount</p>
@*
<div>
    <button class="btn btn-primary" @onclick="IncrementCount">Click me</button>
</div>
*@
<AuthorizeView>
    <Authorized>
        <p>You are authorized @context.User.FindFirst(ClaimTypes.Name)!.Value !</p>
        <button class="btn btn-primary" @onclick="IncrementCount">Click me</button>
    </Authorized>
    <NotAuthorized>
        You are not authorized to do this
    </NotAuthorized>
    <Authorizing>
        Authorizing...
    </Authorizing>
</AuthorizeView>

<br />
<br />
<input type="number" @bind-value="currentCount" @bind-value:event="oninput" />

<br />
<br />
<TelerikContainer>
    <TelerikDatePicker @bind-Value="@DatePickerValue" Width="200px" />
</TelerikContainer>

@code {
    [CascadingParameter] private Task<AuthenticationState> authenticationState { get; set; }

    private int currentCount = 0;
    private DateTime DatePickerValue { get; set; } = DateTime.Today;

    private async Task IncrementCount()
    {
        var authState = await authenticationState;
        var user = authState.User;
        if (user.Identity.IsAuthenticated)
        {
            currentCount++;
            Console.WriteLine(user.Identity.Name);
        }
        else
        {
            currentCount--;
        }
        
        logger.LogInformation($"IncrementCount -- currentCount: {currentCount}");
    }
}
